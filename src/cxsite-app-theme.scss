@import '~@angular/material/theming';
// Plus imports for other components in your app.

// Include the base styles for Angular Material core. We include this
// here so that you only have to load a single css file for Angular
// Material in your app.
// **Be sure that you only ever include this mixin once!**
@include mat-core();

// Define the palettes for your theme using the Material Design palettes
// available in palette.scss (imported above). For each palette, you can // optionally specify a default, lighter, and darker hue.
$cxsite-app-primary: mat-palette($mat-grey);
$cxsite-app-accent:  mat-palette($mat-amber, A200, A100, A400);

// The warn palette is optional (defaults to red).
$cxsite-app-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$cxsite-app-theme: mat-light-theme($cxsite-app-primary, $cxsite-app-accent, $cxsite-app-warn);

// The default theme styles.
// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for
// each component that you are using.
@include angular-material-theme($cxsite-app-theme);

// Defines an alternate dark theme (but I'm using same col palette)
$cx-dark-theme: mat-dark-theme($cxsite-app-primary, $cxsite-app-accent);

// Include the alternative theme styles inside of a block with a CSS
// class. You can make this CSS class whatever you want - so any
// component inside of an element with `.cx-dark-theme` will be
// affected by this alternate dark theme instead of the default theme.
.cx-dark-theme {
  @include angular-material-theme($cx-dark-theme);
}

// Defines an alternate light theme (if I use dark as default)
// $cx-light-theme: mat-light-theme($cxsite-app-primary, $cxsite-app-accent);

// .cx-light-theme {
//   @include angular-material-theme($cx-light-theme);
// }
